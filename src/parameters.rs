use bls12_381 as bls;

use crate::bls_extensions::*;
use crate::hashable::*;

pub struct Parameters<R: RngInstance> {
    pub g1: bls::G1Affine,
    pub hs: Vec<bls::G1Affine>,
    pub g2: bls::G2Affine,
    _marker: std::marker::PhantomData<R>,
}

impl<R: RngInstance> Parameters<R> {
    pub fn new(attributes_size: u32) -> Self {
        let g1 = bls::G1Affine::generator();
        let g2 = bls::G2Affine::generator();

        let hs = (0..attributes_size)
            .map(|i| {
                let message = format!("h{}", i);
                bls::G1Affine::hash_to_point(message.as_bytes())
            })
            .collect();

        Parameters {
            g1: g1,
            hs: hs,
            g2: g2,
            _marker: std::marker::PhantomData,
        }
    }

    pub fn random_scalar(&self) -> bls::Scalar {
        bls::Scalar::new_random::<R>()
    }

    pub fn random_scalars(&self, n: usize) -> Vec<bls::Scalar> {
        (0..n).map(|_| self.random_scalar()).collect()
    }
}

#[test]
fn test_parameters() {
    let attrs_size = 2;
    let params = Parameters::<OsRngInstance>::new(attrs_size);

    assert_eq!(
        params.g1,
        bls::G1Affine::from_compressed(&[
            0x97, 0xf1, 0xd3, 0xa7, 0x31, 0x97, 0xd7, 0x94, 0x26, 0x95, 0x63, 0x8c, 0x4f, 0xa9,
            0xac, 0x0f, 0xc3, 0x68, 0x8c, 0x4f, 0x97, 0x74, 0xb9, 0x05, 0xa1, 0x4e, 0x3a, 0x3f,
            0x17, 0x1b, 0xac, 0x58, 0x6c, 0x55, 0xe8, 0x3f, 0xf9, 0x7a, 0x1a, 0xef, 0xfb, 0x3a,
            0xf0, 0x0a, 0xdb, 0x22, 0xc6, 0xbb
        ])
        .unwrap()
    );

    assert_eq!(
        params.g2,
        bls::G2Affine::from_compressed(&[
            0x93, 0xe0, 0x2b, 0x60, 0x52, 0x71, 0x9f, 0x60, 0x7d, 0xac, 0xd3, 0xa0, 0x88, 0x27,
            0x4f, 0x65, 0x59, 0x6b, 0xd0, 0xd0, 0x99, 0x20, 0xb6, 0x1a, 0xb5, 0xda, 0x61, 0xbb,
            0xdc, 0x7f, 0x50, 0x49, 0x33, 0x4c, 0xf1, 0x12, 0x13, 0x94, 0x5d, 0x57, 0xe5, 0xac,
            0x7d, 0x05, 0x5d, 0x04, 0x2b, 0x7e, 0x02, 0x4a, 0xa2, 0xb2, 0xf0, 0x8f, 0x0a, 0x91,
            0x26, 0x08, 0x05, 0x27, 0x2d, 0xc5, 0x10, 0x51, 0xc6, 0xe4, 0x7a, 0xd4, 0xfa, 0x40,
            0x3b, 0x02, 0xb4, 0x51, 0x0b, 0x64, 0x7a, 0xe3, 0xd1, 0x77, 0x0b, 0xac, 0x03, 0x26,
            0xa8, 0x05, 0xbb, 0xef, 0xd4, 0x80, 0x56, 0xc8, 0xc1, 0x21, 0xbd, 0xb8
        ])
        .unwrap()
    );

    assert_eq!(params.hs.len(), 2);

    assert_eq!(
        params.hs[0],
        bls::G1Affine::from_compressed(&[
            0x8b, 0x8a, 0x74, 0xcb, 0xb2, 0x82, 0x27, 0x8d, 0x67, 0x06, 0x6e, 0x05, 0x96, 0x64,
            0x65, 0x50, 0x89, 0x02, 0xb7, 0x82, 0xf1, 0x38, 0x67, 0x7f, 0x4c, 0xdf, 0xa2, 0xdf,
            0xaf, 0xc1, 0xe8, 0x58, 0x6f, 0x71, 0x0a, 0x3c, 0x57, 0x0d, 0xa4, 0x51, 0x80, 0x7b,
            0x43, 0xef, 0x53, 0xa8, 0x18, 0x82,
        ])
        .unwrap()
    );

    assert_eq!(
        params.hs[1],
        bls::G1Affine::from_compressed(&[
            0xad, 0x74, 0x9d, 0xcf, 0xee, 0x7a, 0xcf, 0x94, 0xb4, 0x7f, 0xbf, 0x72, 0xaf, 0x6d,
            0x5d, 0xb4, 0x45, 0xa6, 0xd9, 0x08, 0x42, 0xf7, 0x89, 0x26, 0x19, 0xe5, 0x44, 0xac,
            0x32, 0x50, 0x61, 0x1d, 0x9e, 0xbd, 0xe9, 0x77, 0x76, 0xaf, 0x62, 0xf0, 0xbf, 0xc0,
            0xb1, 0xca, 0x48, 0x32, 0xf2, 0xe3,
        ])
        .unwrap()
    );
}
